// Find The Nth Node in inorder traversal of a binary search tree
@author icshacks
// Visit our medium page to find more interesting explanation to each problems 
// medium.com/ICSHacks


import java.util.*;
public class NthNode {
	// Class for Node 
	static class Node {
		int data;
		Node leftChild;
		Node rightChild;
		//constructor
		Node(int data){
			this.data = data;
			leftChild = rightChild = null;
		}
	}
	static int count =0 ; // variable to maintain the count of nodes in inorder traversal
	static Node root;
	//constructor
	NthNode() {
		root = null;
	}
	// function to insert values in the bst
	public static Node insertUtil(Node root, int data) {
		Node newNode = new Node(data);
		if(root==null) {
			root = newNode;
			return root;
		}	
		else if(root.data>data)
			root.leftChild = insertUtil(root.leftChild,data);
		else 
			root.rightChild = insertUtil(root.rightChild,data);
		return root;
	}
	public static void insert(int data) {
		root = insertUtil(root,data);
	}
	
	// print the inorder traversal of the tree
	public static void inorder() {
		inorderUtil(root);
	}
	public static void inorderUtil(Node root) {
		if(root!=null) {
			inorderUtil(root.leftChild);
			System.out.print(root.data+" ");
			inorderUtil(root.rightChild);
		}
	}
	
	// display the nth node of inorder traversal
	public static void nthinorder(int n) {
		nthinorderUtil(root,n);
	}
	public static void nthinorderUtil(Node root, int n) {
		if(root!=null && count < n) {
			nthinorderUtil(root.leftChild,n);
			count++;
			if(count==n) {
				System.out.println(root.data);
				return;
			}	
			nthinorderUtil(root.rightChild, n);
		}
	}
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int noOfNodes = sc.nextInt();
		NthNode bst = new NthNode();
		int i;
		for(i=0;i<noOfNodes;i++) {
			int data = sc.nextInt();
			bst.insert(data);
		}
		int n = sc.nextInt();
		if(n < 0 || n > noOfNodes)
			System.out.println("Nth Node is out of bounds");
		else {
			System.out.println("Inorder Traversal: ");
			bst.inorder();
			System.out.println("Nth Node in Inorder Traversal:");
			bst.nthinorder(n);
		}
	}

}
